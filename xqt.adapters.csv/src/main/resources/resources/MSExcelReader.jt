@import xqt.adapters.csv.reader.*
@import com.vaiona.commons.data.*
@import com.vaiona.commons.types.*;

@args() {
    String sourceOfData,
    boolean writeResultsToFile,
    String rowHeader,
    String linePattern,
    String namespace,
    String BaseClassName,
    String RecordClassName,
    String EntityClassName,
    String ReaderClassName,
    String LeftClassName,
    String RightClassName,
    String TargetRowType,
    String Where,
    Map<AttributeInfo, String> Ordering,
    Integer skip,
    Integer take,
    String ContainerName
}

package @(namespace);

import @(namespace).*;
import com.vaiona.commons.logging.*;
import com.vaiona.commons.data.*;
import java.io.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.logging.Level;
import java.util.logging.Logger;

import xqt.adapters.csv.reader.RowBuilder;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

@@SuppressWarnings("unchecked")
public class @(ReaderClassName) implements DataReader<@(TargetRowType), @(LeftClassName), @(RightClassName)> {

    Stream<Row> reader;
    BufferedWriter writer;

    //Map<String, FieldInfo> headers = new LinkedHashMap<>();

    String  columnDelimiter     = ",";
    String  quoteMarker       = "\"";
    String  typeDelimiter       = ":";
    String  unitDelimiter       = "::";
    String  commentIndicator    = "#";
    String  missingValue        = "NA";
    String  source              = "";
    String  target              = "";
    boolean bypassFirstRow      = false;
    boolean trimTokens          = true;
    LineParser lineParser       = new DefaultLineParser();

    public List<@(TargetRowType)> read(List<@(LeftClassName)> source1, List<@(RightClassName)> source2)  throws FileNotFoundException, IOException {
        @if(Ordering!= null && Ordering.size() > 0) {
        Comparator<@(TargetRowType)> sorter = new Comparator<@(TargetRowType)>() {
                    @@Override
                    public int compare(@(TargetRowType) left, @(TargetRowType) right){
                    @for (Map.Entry<AttributeInfo, String> entry : Ordering.entrySet()) {
                        @{
                            DataTypeInfo dti = TypeSystem.getTypes().get(entry.getKey().conceptualDataType);
                            AttributeInfo ad = entry.getKey();
                        }
                        @if(Ordering.size() == 1) {                            
                            @if(entry.getValue().toUpperCase().equals("ASC")){
                                return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                            } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                            }
                        } else {
                            @if(entry_isFirst){
                                if(@(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name))) != 0){
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            } else if (!entry_isFirst && !entry_isLast) { 
                                else if(@(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name))) != 0){
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            } else if (entry_isLast) {
                                else {
                                    @if(entry.getValue().toUpperCase().equals("ASC")){
                                        return @(dti.getComparePattern().replace("$first$", "left." + (ad.name)).replace("$second$", "right." + (ad.name)));
                                    } else if(entry.getValue().toUpperCase().equals("DESC")) {
                                        return @(dti.getComparePattern().replace("$first$", "right." + (ad.name)).replace("$second$", "left." + (ad.name)));
                                    }
                                }
                            }
                        }
                    }
               }
              };
        }

        lineParser.setQuoteMarker(quoteMarker);
        lineParser.setDilimiter(columnDelimiter);
        lineParser.setTrimTokens(trimTokens);

        @if(sourceOfData.equalsIgnoreCase("container")){
            XSSFWorkbook workbook = new XSSFWorkbook(new FileInputStream(new File(source)));
            XSSFSheet sheet = null;
			sheet  = workbook.getSheet("@(ContainerName)");
			if(sheet == null){
				Integer index = Integer.parseInt("@(ContainerName)");
				sheet = workbook.getSheetAt(index);
			}            
            reader = StreamSupport.stream(
                    Spliterators.spliterator(sheet.iterator(), sheet.getPhysicalNumberOfRows(),Spliterator.ORDERED),false);
            FormulaEvaluator evaluator = workbook.getCreationHelper().createFormulaEvaluator();
            if(this.bypassFirstRow){
                    reader = reader.skip(1);
            }           
            @if(!writeResultsToFile){
                List<@(EntityClassName)> result = 
            } else {
                @/ create the file and make it empty. when there is no record to write to the output file, the file should be reset 
                writer = new BufferedWriter(new FileWriter(new File(target)));
                writer.write("@rowHeader" + "\n");
                long result =
            }
            reader
                .filter(row -> (!row.getZeroHeight()))
                .map(row -> RowBuilder.createRowArray(row, evaluator))
                .map(rowArray -> new @(EntityClassName)(rowArray))
                //.peek(p-> {System.out.println("Excel row is read!");})
            @if(Where!= null && !Where.isEmpty()) {
                .filter(p -> (p.isValid == true) && (@Where))
            }
            else{
                .filter(p -> (p.isValid == true) )
            }
            @//.parallel()
            @if(Ordering!= null && Ordering.size() > 0) { // if order is present, populate and then sort
                .map(p->p.populate())
                .filter(p->p.isValid)
                .sorted(sorter)
                @if(skip > -1){
                    .skip(@(skip))
                }
                @if(take > -1){
                    .limit(@(take))
                }
            } else { @/ if there no ordering, there no need for early post-population, its better to skip/ take and then post-populate
                @if(skip > -1){
                    .skip(@(skip))
                }
                @if(take > -1){
                    .limit(@(take))
                }
                .map(p->p.populate())
                .filter(p->p.isValid)                
            }
            @if(writeResultsToFile){
                .peek(p-> writeToFile(p))
                .count() // it is just to make the stream to be consumed
            } else {
                .collect(Collectors.toList())
            }
            ;
            @if(writeResultsToFile){
                if (writer != null){
                   try {
                       writer.flush();
                       writer.close();
                   } catch (IOException ex) {
                       Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                   }        
                }
                @/ Logger.getLogger(this.getClass().getName()).info("Number of retrieved records:" + result + ".\n");
                return null;
            } else {return result;}
        } else if (sourceOfData.equalsIgnoreCase("variable")) {
            @if(!writeResultsToFile){
                List<@(EntityClassName)> result = null;
            } else {
                @/ create the file and make it empty. when there is no record to write to the output file, the file should be reset 
                @/ Logger.getLogger(this.getClass().getName()).info("Target file name is:" + target + ".\n");
                writer = new BufferedWriter(new FileWriter(new File(target)));
                writer.write("@rowHeader" + "\n");
                @/ Logger.getLogger(this.getClass().getName()).info("Writer is opened.\n");
                long result = 0;
            }
            if(source1 != null) {
                result = source1.stream()
                    @if(Where!= null && !Where.isEmpty()) {
                        .filter(p -> (p.isValid == true) && (@Where))
                    }
                    else{
                        .filter(p -> (p.isValid == true) )
                    }
                    @if(Ordering!= null && Ordering.size() > 0) {
                       .sorted(sorter)
                    }
                    @if(skip > -1){
                        .skip(@(skip))
                    }
                    @if(take > -1){
                        .limit(@(take))
                    }
                @if(writeResultsToFile){
                    .peek(p-> writeToFile(p))
                    .count() // it is just to make the stream to be consumed
                } else {
                    .collect(Collectors.toList())
                }
                ;
            }
            @if(writeResultsToFile){
                if (writer != null){
                   try {
                       writer.flush();
                       writer.close();
                       @/ Logger.getLogger(this.getClass().getName()).info("Writer is closed.\n");
                   } catch (IOException ex) {
                       Logger.getLogger(TestReader.class.getName()).log(Level.SEVERE, null, ex);
                   }        
                }
                @/ Logger.getLogger(this.getClass().getName()).info("Number of retrieved records:" + result + ".\n");
                return null;
            } else {return result;}
        }
    }

    @if (sourceOfData.equalsIgnoreCase("variable")) {
        private void writeToFile(@(EntityClassName) entity)
    } else {
        private void writeToFile(@(EntityClassName) entity)
    }
        {
        try {
            if (writer == null) {
                writer = new BufferedWriter(new FileWriter(new File(target)));
                writer.write("@rowHeader" + "\n");
            }
            String line = lineParser.join(@linePattern);
            writer.write(line + "\n");
            @/ Logger.getLogger(this.getClass().getName()).info("A row is written to the file.\n");
        } catch (IOException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex); @/ change it with an AdpaterExcetion
        } 
    }

    @@Override
    public DataReader columnDelimiter(String value) {
        columnDelimiter = value;
        return this;
    }

    @@Override
    public DataReader quoteMarker(String value) {
        quoteMarker = value;
        return this;
    }

    @@Override
    public DataReader trimTokens(boolean value) {
        trimTokens = value;
        return this;
    }

    @@Override
    public DataReader typeDelimiter(String value) {
        typeDelimiter = value;
        return this;
    }

    @@Override
    public DataReader unitDelimiter(String value) {
        unitDelimiter = value;
        return this;
    }

    @@Override
    public DataReader missingValue(String value) {
        missingValue = value;
        return this;
    }
    
    @@Override
    public DataReader source(String value){
        source = value;
        return this;
    }
    
    @@Override
    public DataReader target(String value){
        target = value;
        return this;
    }

    @@Override
    public DataReader bypassFirstRow(Boolean value){
        bypassFirstRow = value;
        return this;
    }

    @@Override
    public DataReader bypassFirstRowRight(Boolean value) {
        return this;
    }

    @@Override
    public DataReader sourceRight(String value) {
        return this;
    }

    @@Override
    public DataReader columnDelimiterRight(String value) {
        return this;
    }
}
